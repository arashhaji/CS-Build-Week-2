'''
understanding:
-You are given a target value to search. If found in the array return its index, otherwise return -1.
- You may assume no duplicate exists in the array.
- Your algorithmâ€™s runtime complexity must be in the order of O(log n).

planning:
-Consider we have an array sorted in ascending order, and that is rotated at some pivot unknown to you beforehand.
-We have given a target value to the search. 
-If we can get it in the array, then return its index, otherwise return -1. 
-We can assume no duplicate exists in the array. So if the array is like [4,5,6,7,0,1,2], then the output will be 4. as the index of this element is present at index 4.

'''


class Solution:
    def search(self, nums: List[int], target: int) -> int:
        
        # length of array 
        low = 0
        high = len(nums)
        
        while low<high:
            mid = low + (high-low)//2
            
            #if array mid = target then return mid 
            if nums[mid] == target:
                return mid
            
            #if array low<= array mid 
            #if target>=array low and target<array mid,then high mid, otherwise low mid + 1
            if nums[low]<=nums[mid]:
                if target >=nums[low] and target <nums[mid]:
                    high = mid
                else:
                    low = mid+1
            
            #target<= array high -1 and target > array mid, then low mid +1 
            else:
                if target<=nums[high-1] and target>nums[mid]:
                    low = mid+1
               
                else:
                    high = mid
        
        return -1
